{"ast":null,"code":"import \"antd/es/table/style/css\";\nimport _Table from \"antd/es/table\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\antd-demo\\\\src\\\\components\\\\Table10.jsx\";\nimport reqwest from 'reqwest';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst columns = [{\n  title: 'Name',\n  dataIndex: 'name',\n  sorter: true,\n  render: name => `${name.first} ${name.last}`,\n  width: '20%'\n}, {\n  title: 'Gender',\n  dataIndex: 'gender',\n  filters: [{\n    text: 'Male',\n    value: 'male'\n  }, {\n    text: 'Female',\n    value: 'female'\n  }],\n  width: '20%'\n}, {\n  title: 'Email',\n  dataIndex: 'email'\n}];\n\nconst getRandomuserParams = params => ({\n  results: params.pagination.pageSize,\n  page: params.pagination.current,\n  ...params\n});\n\nclass App extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: [],\n      pagination: {\n        current: 1,\n        pageSize: 10\n      },\n      loading: false\n    };\n\n    this.handleTableChange = (pagination, filters, sorter) => {\n      this.fetch({\n        sortField: sorter.field,\n        sortOrder: sorter.order,\n        pagination,\n        ...filters\n      });\n    };\n\n    this.fetch = (params = {}) => {\n      this.setState({\n        loading: true\n      });\n      reqwest({\n        url: 'https://randomuser.me/api',\n        method: 'get',\n        type: 'json',\n        data: getRandomuserParams(params)\n      }).then(data => {\n        console.log(data);\n        this.setState({\n          loading: false,\n          data: data.results,\n          pagination: { ...params.pagination,\n            total: 200 // 200 is mock data, you should read it from server\n            // total: data.totalCount,\n\n          }\n        });\n      });\n    };\n  }\n\n  componentDidMount() {\n    const {\n      pagination\n    } = this.state;\n    this.fetch({\n      pagination\n    });\n  }\n\n  render() {\n    const {\n      data,\n      pagination,\n      loading\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(_Table, {\n      columns: columns,\n      rowKey: record => record.login.uuid,\n      dataSource: data,\n      pagination: pagination,\n      loading: loading,\n      onChange: this.handleTableChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 94,\n  columnNumber: 17\n}, this), mountNode);","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/antd-demo/src/components/Table10.jsx"],"names":["reqwest","columns","title","dataIndex","sorter","render","name","first","last","width","filters","text","value","getRandomuserParams","params","results","pagination","pageSize","page","current","App","React","Component","state","data","loading","handleTableChange","fetch","sortField","field","sortOrder","order","setState","url","method","type","then","console","log","total","componentDidMount","record","login","uuid","ReactDOM","mountNode"],"mappings":"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","sourcesContent":["import { Table } from 'antd';\r\nimport reqwest from 'reqwest';\r\n\r\nconst columns = [\r\n    {\r\n        title: 'Name',\r\n        dataIndex: 'name',\r\n        sorter: true,\r\n        render: name => `${name.first} ${name.last}`,\r\n        width: '20%',\r\n    },\r\n    {\r\n        title: 'Gender',\r\n        dataIndex: 'gender',\r\n        filters: [\r\n            { text: 'Male', value: 'male' },\r\n            { text: 'Female', value: 'female' },\r\n        ],\r\n        width: '20%',\r\n    },\r\n    {\r\n        title: 'Email',\r\n        dataIndex: 'email',\r\n    },\r\n];\r\n\r\nconst getRandomuserParams = params => ({\r\n    results: params.pagination.pageSize,\r\n    page: params.pagination.current,\r\n    ...params,\r\n});\r\n\r\nclass App extends React.Component {\r\n    state = {\r\n        data: [],\r\n        pagination: {\r\n            current: 1,\r\n            pageSize: 10,\r\n        },\r\n        loading: false,\r\n    };\r\n\r\n    componentDidMount() {\r\n        const { pagination } = this.state;\r\n        this.fetch({ pagination });\r\n    }\r\n\r\n    handleTableChange = (pagination, filters, sorter) => {\r\n        this.fetch({\r\n            sortField: sorter.field,\r\n            sortOrder: sorter.order,\r\n            pagination,\r\n            ...filters,\r\n        });\r\n    };\r\n\r\n    fetch = (params = {}) => {\r\n        this.setState({ loading: true });\r\n        reqwest({\r\n            url: 'https://randomuser.me/api',\r\n            method: 'get',\r\n            type: 'json',\r\n            data: getRandomuserParams(params),\r\n        }).then(data => {\r\n            console.log(data);\r\n            this.setState({\r\n                loading: false,\r\n                data: data.results,\r\n                pagination: {\r\n                    ...params.pagination,\r\n                    total: 200,\r\n                    // 200 is mock data, you should read it from server\r\n                    // total: data.totalCount,\r\n                },\r\n            });\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { data, pagination, loading } = this.state;\r\n        return (\r\n            <Table\r\n                columns={columns}\r\n                rowKey={record => record.login.uuid}\r\n                dataSource={data}\r\n                pagination={pagination}\r\n                loading={loading}\r\n                onChange={this.handleTableChange}\r\n            />\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(<App />, mountNode);"]},"metadata":{},"sourceType":"module"}