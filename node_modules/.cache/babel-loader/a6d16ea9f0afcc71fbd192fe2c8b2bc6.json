{"ast":null,"code":"import \"antd/es/tree/style/css\";\nimport _Tree from \"antd/es/tree\";\nvar _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Desktop\\\\antd-demo\\\\src\\\\components\\\\Tree3.jsx\";\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst x = 3;\nconst y = 2;\nconst z = 1;\nconst gData = [];\n\nconst generateData = (_level, _preKey, _tns) => {\n  const preKey = _preKey || '0';\n  const tns = _tns || gData;\n  const children = [];\n\n  for (let i = 0; i < x; i++) {\n    const key = `${preKey}-${i}`;\n    tns.push({\n      title: key,\n      key\n    });\n\n    if (i < y) {\n      children.push(key);\n    }\n  }\n\n  if (_level < 0) {\n    return tns;\n  }\n\n  const level = _level - 1;\n  children.forEach((key, index) => {\n    tns[index].children = [];\n    return generateData(level, key, tns[index].children);\n  });\n};\n\ngenerateData(z);\nexport default class Demo extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      gData,\n      expandedKeys: ['0-0', '0-0-0', '0-0-0-0']\n    };\n\n    this.onDragEnter = info => {\n      console.log(info); // expandedKeys 需要受控时设置\n      // this.setState({\n      //   expandedKeys: info.expandedKeys,\n      // });\n    };\n\n    this.onDrop = info => {\n      console.log(info);\n      const dropKey = info.node.key;\n      const dragKey = info.dragNode.key;\n      const dropPos = info.node.pos.split('-');\n      const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\n\n      const loop = (data, key, callback) => {\n        for (let i = 0; i < data.length; i++) {\n          if (data[i].key === key) {\n            return callback(data[i], i, data);\n          }\n\n          if (data[i].children) {\n            loop(data[i].children, key, callback);\n          }\n        }\n      };\n\n      const data = [...this.state.gData]; // Find dragObject\n\n      let dragObj;\n      loop(data, dragKey, (item, index, arr) => {\n        arr.splice(index, 1);\n        dragObj = item;\n      });\n\n      if (!info.dropToGap) {\n        // Drop on the content\n        loop(data, dropKey, item => {\n          item.children = item.children || []; // where to insert 示例添加到头部，可以是随意位置\n\n          item.children.unshift(dragObj);\n        });\n      } else if ((info.node.props.children || []).length > 0 && // Has children\n      info.node.props.expanded && // Is expanded\n      dropPosition === 1 // On the bottom gap\n      ) {\n          loop(data, dropKey, item => {\n            item.children = item.children || []; // where to insert 示例添加到头部，可以是随意位置\n\n            item.children.unshift(dragObj); // in previous version, we use item.children.push(dragObj) to insert the\n            // item to the tail of the children\n          });\n        } else {\n        let ar;\n        let i;\n        loop(data, dropKey, (item, index, arr) => {\n          ar = arr;\n          i = index;\n        });\n\n        if (dropPosition === -1) {\n          ar.splice(i, 0, dragObj);\n        } else {\n          ar.splice(i + 1, 0, dragObj);\n        }\n      }\n\n      this.setState({\n        gData: data\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(_Tree, {\n      className: \"draggable-tree\",\n      defaultExpandedKeys: this.state.expandedKeys,\n      draggable: true,\n      blockNode: true // \tdragenter 触发时调用\n      ,\n      onDragEnter: this.onDragEnter,\n      onDrop: this.onDrop,\n      treeData: this.state.gData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Administrator/Desktop/antd-demo/src/components/Tree3.jsx"],"names":["React","useState","x","y","z","gData","generateData","_level","_preKey","_tns","preKey","tns","children","i","key","push","title","level","forEach","index","Demo","Component","state","expandedKeys","onDragEnter","info","console","log","onDrop","dropKey","node","dragKey","dragNode","dropPos","pos","split","dropPosition","Number","length","loop","data","callback","dragObj","item","arr","splice","dropToGap","unshift","props","expanded","ar","setState","render"],"mappings":"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","sourcesContent":["\r\nimport { Tree } from 'antd';\r\nimport React, { useState } from 'react';\r\n\r\nconst x = 3;\r\nconst y = 2;\r\nconst z = 1;\r\nconst gData = [];\r\n\r\nconst generateData = (_level, _preKey, _tns) => {\r\n    const preKey = _preKey || '0';\r\n    const tns = _tns || gData;\r\n\r\n    const children = [];\r\n    for (let i = 0; i < x; i++) {\r\n        const key = `${preKey}-${i}`;\r\n        tns.push({ title: key, key });\r\n        if (i < y) {\r\n            children.push(key);\r\n        }\r\n    }\r\n    if (_level < 0) {\r\n        return tns;\r\n    }\r\n    const level = _level - 1;\r\n    children.forEach((key, index) => {\r\n        tns[index].children = [];\r\n        return generateData(level, key, tns[index].children);\r\n    });\r\n};\r\ngenerateData(z);\r\n\r\nexport default class Demo extends React.Component {\r\n    state = {\r\n        gData,\r\n        expandedKeys: ['0-0', '0-0-0', '0-0-0-0'],\r\n    };\r\n\r\n    onDragEnter = info => {\r\n        console.log(info);\r\n        // expandedKeys 需要受控时设置\r\n        // this.setState({\r\n        //   expandedKeys: info.expandedKeys,\r\n        // });\r\n    };\r\n\r\n    onDrop = info => {\r\n        console.log(info);\r\n        const dropKey = info.node.key;\r\n        const dragKey = info.dragNode.key;\r\n        const dropPos = info.node.pos.split('-');\r\n        const dropPosition = info.dropPosition - Number(dropPos[dropPos.length - 1]);\r\n\r\n        const loop = (data, key, callback) => {\r\n            for (let i = 0; i < data.length; i++) {\r\n                if (data[i].key === key) {\r\n                    return callback(data[i], i, data);\r\n                }\r\n                if (data[i].children) {\r\n                    loop(data[i].children, key, callback);\r\n                }\r\n            }\r\n        };\r\n        const data = [...this.state.gData];\r\n\r\n        // Find dragObject\r\n        let dragObj;\r\n        loop(data, dragKey, (item, index, arr) => {\r\n            arr.splice(index, 1);\r\n            dragObj = item;\r\n        });\r\n\r\n        if (!info.dropToGap) {\r\n            // Drop on the content\r\n            loop(data, dropKey, item => {\r\n                item.children = item.children || [];\r\n                // where to insert 示例添加到头部，可以是随意位置\r\n                item.children.unshift(dragObj);\r\n            });\r\n        } else if (\r\n            (info.node.props.children || []).length > 0 && // Has children\r\n            info.node.props.expanded && // Is expanded\r\n            dropPosition === 1 // On the bottom gap\r\n        ) {\r\n            loop(data, dropKey, item => {\r\n                item.children = item.children || [];\r\n                // where to insert 示例添加到头部，可以是随意位置\r\n                item.children.unshift(dragObj);\r\n                // in previous version, we use item.children.push(dragObj) to insert the\r\n                // item to the tail of the children\r\n            });\r\n        } else {\r\n            let ar;\r\n            let i;\r\n            loop(data, dropKey, (item, index, arr) => {\r\n                ar = arr;\r\n                i = index;\r\n            });\r\n            if (dropPosition === -1) {\r\n                ar.splice(i, 0, dragObj);\r\n            } else {\r\n                ar.splice(i + 1, 0, dragObj);\r\n            }\r\n        }\r\n\r\n        this.setState({\r\n            gData: data,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <Tree\r\n                className=\"draggable-tree\"\r\n                defaultExpandedKeys={this.state.expandedKeys}\r\n                draggable\r\n                blockNode\r\n                // \tdragenter 触发时调用\r\n                onDragEnter={this.onDragEnter}\r\n                onDrop={this.onDrop}\r\n                treeData={this.state.gData}\r\n            />\r\n        );\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}